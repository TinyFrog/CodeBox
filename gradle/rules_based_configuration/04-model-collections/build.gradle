/*
    Exercises:

    1. Add a rule that adds a ModelMap of Greeting types to the model.
    2. Add a mutation rule that adds some entries to the collection of Greetings.
    3. Add a mutation rule that creates a GreetingTask for every greeting.
    4. Run each new task and verify the result.

    Hint: You can iterate over the collection using `ModelMap.keySet().each { key -> }`.
 */

class MyPlugin extends RuleSource {    

	@Model
	public void greetings(ModelMap<Greeting> greetings) {
		// this create the ModelMap itself
	}
	
	@Mutate
	public void addGreeting(ModelMap<Greeting> greetings) {
		// this creates a Greeting foo for 
		greetings.create('foo') {
			salutation = 'foo'
			subject = 'foo subject'
		}
		// dot notation does not allow
		//greetings.foo.salutation = 'foo salute'
		//greetings.foo.subject = 'foo'
		
		greetings.create('bar') {
			salutation = 'bar'
			subject = 'bar subject'
		}
		//greetings.bar.salutation = 'bar salute'
		//greetings.bar.subject = 'bar'
		
	}
	
	@Mutate
	public void createGreetingTask(ModelMap<Task> tasks, ModelMap<Greeting> greetings) {
		greetings.keySet().each { key ->
			tasks.create("${key}", GreetingTask) {
				message = greetings[key]
			}
		}
	}
}

@Managed
interface Greeting {
    String getSalutation()
    void setSalutation(String salutation)
    String getSubject()
    void setSubject(String subject)
}

class GreetingTask extends DefaultTask {
    Greeting message
    
    @TaskAction
    void sayGreeting() {
        println "$message.salutation, $message.subject"
    }
}

apply plugin: MyPlugin